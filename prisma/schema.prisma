// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  passwordHash String
  createdAt    DateTime @default(now())

  polls  Poll[]    @relation("UserPolls")
  votes  Vote[]
}

model Poll {
  id          String       @id @default(uuid())
  question    String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  creator     User         @relation("UserPolls", fields: [creatorId], references: [id])
  creatorId   String

  options     PollOption[]
  votes       Vote[]       // convenient back relation
}

model PollOption {
  id      String  @id @default(uuid())
  text    String
  poll    Poll    @relation(fields: [pollId], references: [id])
  pollId  String

  votes   Vote[]
}

model Vote {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String

  createdAt    DateTime   @default(now())

  /// ensure a user can have at most one vote per poll
  @@unique([userId, pollId])
}